/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package week_05;

/**
 *
 * @author abcmn
 */
import javax.swing.*;

import java.io.BufferedReader;

import java.io.File;

import java.io.FileReader;

import java.io.FileWriter;

import java.io.IOException;

import java.util.logging.Level;

import java.util.logging.Logger;
public class frm_DESCS extends javax.swing.JFrame {

    /**
     * Creates new form frm_DESCS
     */
    public frm_DESCS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_plaintext = new javax.swing.JTextField();
        txt_key = new javax.swing.JTextField();
        txt_ciphertext = new javax.swing.JTextField();
        btn_open_alice_key = new javax.swing.JButton();
        btn_open_bob_key = new javax.swing.JButton();
        btn_encrypt = new javax.swing.JButton();
        btn_decrypt = new javax.swing.JButton();
        btn_saveFile = new javax.swing.JButton();
        btn_openFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Des Cipher Demo (D-H)");

        jLabel2.setText("Plaintext");

        jLabel3.setText("Key");

        jLabel4.setText("Ciphertext");

        txt_ciphertext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_ciphertextActionPerformed(evt);
            }
        });

        btn_open_alice_key.setText("Open Alice's key");
        btn_open_alice_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open_alice_keyActionPerformed(evt);
            }
        });

        btn_open_bob_key.setText("Open Bob's key");
        btn_open_bob_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open_bob_keyActionPerformed(evt);
            }
        });

        btn_encrypt.setText("Encrypt");
        btn_encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_encryptActionPerformed(evt);
            }
        });

        btn_decrypt.setText("Decrypt");
        btn_decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_decryptActionPerformed(evt);
            }
        });

        btn_saveFile.setText("Save to file");
        btn_saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveFileActionPerformed(evt);
            }
        });

        btn_openFile.setText("Open file");
        btn_openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn_encrypt)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_decrypt))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(btn_open_alice_key)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn_saveFile)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_openFile)
                                        .addGap(13, 13, 13))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btn_open_bob_key)
                                        .addGap(42, 42, 42))))
                            .addComponent(txt_key)
                            .addComponent(txt_plaintext)
                            .addComponent(txt_ciphertext))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txt_plaintext, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_ciphertext, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_open_bob_key)
                    .addComponent(btn_open_alice_key))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_encrypt)
                    .addComponent(btn_decrypt)
                    .addComponent(btn_saveFile)
                    .addComponent(btn_openFile))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_ciphertextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_ciphertextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_ciphertextActionPerformed

    private void btn_open_alice_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open_alice_keyActionPerformed
        try {

            BufferedReader br = null;

            String fileName = "src/week_04/A.txt";

            br = new BufferedReader(new FileReader(fileName));

            StringBuffer sb = new StringBuffer();

            JOptionPane.showMessageDialog(null, "File Opened Successfully.");

            char[] ca= new char[5];

            while (br.ready()) {

            int len = br.read(ca);

            sb.append(ca, 0, len);

            }

            br.close();

            String chuoi = sb.toString();

            txt_key.setText(chuoi);

        } catch (IOException ex) {

            Logger.getLogger(frm_DESCS.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btn_open_alice_keyActionPerformed

    private void btn_open_bob_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open_bob_keyActionPerformed
        try {

            BufferedReader br = null;

            String fileName = "src/week_04/B.txt";

            br = new BufferedReader(new FileReader (fileName));

            StringBuffer sb = new StringBuffer();

            JOptionPane.showMessageDialog(null, "File Opened Successfully.");

            char[] ca = new char[5];

            while (br.ready()) {

            int len = br.read(ca);

            sb.append(ca, 0, len);

            }

            br.close();

            String chuoi = sb.toString();

            txt_key.setText (chuoi);

        } catch (IOException ex) {

            Logger.getLogger(frm_DESCS.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btn_open_bob_keyActionPerformed

    private void btn_encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_encryptActionPerformed
        try {

            String plaintext = txt_plaintext.getText();

            String secretKey = txt_key.getText();

            String encryptedText = DESCipher.encrypt(plaintext, secretKey); 
            
            txt_ciphertext.setText (encryptedText);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this,

                    "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btn_encryptActionPerformed

    private void btn_decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_decryptActionPerformed
        try {

            String ciphertext = txt_ciphertext.getText();

            String secretKey = txt_key.getText();

            String decryptedText = DESCipher.decrypt(ciphertext, secretKey);

            txt_plaintext.setText (decryptedText);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this,

                    "Error: "+ e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btn_decryptActionPerformed

    private void btn_saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveFileActionPerformed
        String ciphertext = txt_ciphertext.getText();

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setDialogTitle ("Save Ciphertext to File");

        int userselection = fileChooser.showSaveDialog(this);

        if (userselection == JFileChooser.APPROVE_OPTION) {

            File fileToSave = fileChooser.getSelectedFile();

            try (FileWriter writer =

                new FileWriter (fileToSave.getAbsolutePath() + ".txt")) {

                writer.write (ciphertext);

                JOptionPane.showMessageDialog(this,

                "Ciphertext saved to file successfully.", "Success", JOptionPane. INFORMATION_MESSAGE);

            } catch (IOException e) {

                JOptionPane.showMessageDialog(this,

                "Error saving file: "+ e.getMessage(), "Error", JOptionPane. ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_btn_saveFileActionPerformed

    private void btn_openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setDialogTitle("Open File containing Ciphertext");

        int userselection = fileChooser.showOpenDialog(this);

        if (userselection == JFileChooser.APPROVE_OPTION) {

            File fileToOpen = fileChooser.getSelectedFile();

            try (BufferedReader reader = new BufferedReader (new FileReader (fileToOpen))) {

            StringBuilder ciphertextBuilder = new StringBuilder();

                String line;

                while ((line = reader.readLine()) != null) {

                    ciphertextBuilder.append(line);

                }

                String ciphertext = ciphertextBuilder.toString().trim();

                txt_ciphertext.setText (ciphertext);

            } catch (IOException e) {

                JOptionPane.showMessageDialog(this, "Error opening file: "+ e.getMessage(), "Error",
                        JOptionPane. ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_btn_openFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_DESCS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_decrypt;
    private javax.swing.JButton btn_encrypt;
    private javax.swing.JButton btn_openFile;
    private javax.swing.JButton btn_open_alice_key;
    private javax.swing.JButton btn_open_bob_key;
    private javax.swing.JButton btn_saveFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txt_ciphertext;
    private javax.swing.JTextField txt_key;
    private javax.swing.JTextField txt_plaintext;
    // End of variables declaration//GEN-END:variables
}
